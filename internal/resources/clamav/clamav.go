package clamav

import (
	"errors"
	"fmt"
	"os/exec"
	"strings"

	"github.com/ryanbyrne30/malware-scanner/internal/utils"
)

type Clamav struct {
	Config string
}

type ScanResult struct {
	File string 
	Ok bool
	Status string
}

func (c *Clamav) ScanFile(file string) (*ScanResult, error) {
	cmd := exec.Command("clamdscan", "-c", c.Config, "--fdpass", "--stream", "--no-summary", file)
	stdout, _ := cmd.Output()
	line := string(stdout)

	if !c.isScanOutputLineParsable(line) {
		return nil, errors.New(fmt.Sprintf("Could not scan file: %s", file))
	}

	ok, status := c.parseScanOutputLine(line)
	return &ScanResult{
		File: file,
		Ok: ok,
		Status: status,
	}, nil

}

func (c *Clamav) isScanOutputLineParsable(line string) bool {
	segs := strings.Split(line, ":")
	if len(segs) < 2 {
		return false
	}

	path := segs[0]
	if !utils.FileExists(path) {
		return false
	}
	
	return true 
}

func (c *Clamav) parseScanOutputLine(line string) (bool, string) {
	segs := strings.SplitN(line, ":", 2)
	status := strings.TrimSpace(segs[1])
	return status == "OK", status
}
